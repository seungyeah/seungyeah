name: Build and deploy (gh-pages worktree)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write   # ← push를 위해 write 권한 필요

concurrency:
  group: pages
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DART_SASS_VERSION: 1.90.0
      GO_VERSION: 1.24.5
      HUGO_VERSION: 0.148.2
      NODE_VERSION: 22.18.0
      TZ: Asia/Seoul
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dart Sass
        run: |
          curl -sLJO "https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          mkdir -p "${HOME}/.local"
          tar -C "${HOME}/.local" -xf "dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          rm "dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          echo "${HOME}/.local/dart-sass" >> "${GITHUB_PATH}"

      - name: Install Hugo
        run: |
          curl -sLJO "https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          mkdir -p "${HOME}/.local/hugo"
          tar -C "${HOME}/.local/hugo" -xf "hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          rm "hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          echo "${HOME}/.local/hugo" >> "${GITHUB_PATH}"

      - name: Verify installations
        run: |
          echo "Sass: $(sass --version)"
          echo "Go: $(go version)"
          echo "Hugo: $(hugo version)"
          echo "Node: $(node --version)"

      - name: Install Node.js dependencies (optional)
        run: |
          [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true

      - name: Set git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config core.quotepath false

      - name: Prepare worktree for gh-pages
        run: |
          # 기존 public 정리
          rm -rf public
          mkdir -p public
          git worktree prune
          rm -rf .git/worktrees/public/ || true

          # gh-pages 브랜치 존재 확인 후 없으면 orphan으로 생성
          if ! git ls-remote --exit-code --heads origin gh-pages >/dev/null 2>&1; then
            echo "Initializing orphan gh-pages branch"
            git checkout --orphan gh-pages
            rm -rf *
            git commit --allow-empty -m "Initialize gh-pages"
            git push origin gh-pages
            git checkout - # 이전 브랜치로 복귀
          else
            git fetch origin gh-pages
          fi

          echo "Checking out gh-pages branch into public (worktree)"
          git worktree add -B gh-pages public origin/gh-pages

      - name: Build site into worktree
        run: |
          # 유저 사이트 기준 baseURL 고정. 테마 쓰면 -t 옵션 유지
          env HUGO_ENV="production" \
          hugo \
            --gc \
            --minify \
            --baseURL "https://seungyeah.github.io/" \
            -t github-style \
            --destination public

          # Jekyll 처리 끄고 싶으면(언더스코어 파일 등) .nojekyll 추가
          touch public/.nojekyll

      - name: Commit and push to gh-pages
        run: |
          cd public
          git add --all

          if git diff --cached --quiet; then
            echo "No changes to publish."
            exit 0
          fi

          git commit -m "Publishing to gh-pages (CI) ${GITHUB_SHA}"
          git push origin gh-pages
