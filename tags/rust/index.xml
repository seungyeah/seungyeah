<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on 승예's Blog</title><link>https://seungyeah.github.io/tags/rust/</link><description>Recent content in Rust on 승예's Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Mon, 18 Aug 2025 04:02:17 +0900</lastBuildDate><atom:link href="https://seungyeah.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>첫 글</title><link>https://seungyeah.github.io/posts/first-post/</link><pubDate>Tue, 31 Dec 2024 10:00:00 +0900</pubDate><guid>https://seungyeah.github.io/posts/first-post/</guid><description>&lt;p>여기는 첫 글입니다.&lt;/p>
&lt;h2 id="섹션-a">섹션 A&lt;/h2>
&lt;p>내용 A&lt;/p>
&lt;h2 id="섹션-b">섹션 B&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">flowchart TD
 A[Start] --&amp;gt; B{Choice}
 B --&amp;gt;|Yes| C[Path 1]
 B --&amp;gt;|No| D[Path 2]
&lt;/code>&lt;/pre></description></item><item><title>Rust 클로저와 이터레이터</title><link>https://seungyeah.github.io/posts/rust-post-12/</link><pubDate>Fri, 12 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-12/</guid><description>&lt;h2 id="클로저">클로저&lt;/h2>
&lt;p>클로저는 익명 함수로, 환경의 변수를 캡처할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> expensive_closure &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">|&lt;/span>num&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;calculating slowly...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread::sleep(Duration::from_secs(&lt;span style="color:#ae81ff">2&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 간단한 형태
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> add_one &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">|&lt;/span>x&lt;span style="color:#f92672">|&lt;/span> x &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> five &lt;span style="color:#f92672">=&lt;/span> add_one(&lt;span style="color:#ae81ff">4&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="이터레이터">이터레이터&lt;/h2>
&lt;p>이터레이터는 컬렉션의 아이템들을 순회할 수 있게 해줍니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> v1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> v1_iter &lt;span style="color:#f92672">=&lt;/span> v1.iter();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> val &lt;span style="color:#66d9ef">in&lt;/span> v1_iter {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Got: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, val);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="이터레이터-어댑터">이터레이터 어댑터&lt;/h2>
&lt;p>이터레이터를 변환하는 메소드들입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> v1: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> v2: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>_&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> v1.iter().map(&lt;span style="color:#f92672">|&lt;/span>x&lt;span style="color:#f92672">|&lt;/span> x &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>).collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> filtered: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>_&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> v1.iter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .filter(&lt;span style="color:#f92672">|&amp;amp;&lt;/span>x&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">*&lt;/span>x &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust 컬렉션: 벡터, 문자열, 해시맵</title><link>https://seungyeah.github.io/posts/rust-post-11/</link><pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-11/</guid><description>&lt;h2 id="벡터-vector">벡터 (Vector)&lt;/h2>
&lt;p>벡터는 같은 타입의 값들을 저장하는 가변 크기 배열입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> Vec::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v.push(&lt;span style="color:#ae81ff">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v.push(&lt;span style="color:#ae81ff">6&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v.push(&lt;span style="color:#ae81ff">7&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 또는 vec! 매크로 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="문자열-string">문자열 (String)&lt;/h2>
&lt;p>Rust에는 두 가지 주요 문자열 타입이 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> String::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s.push_str(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s.push(&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s.push(&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> s1 &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> s2 &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;world!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> s3 &lt;span style="color:#f92672">=&lt;/span> s1 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>s2; &lt;span style="color:#75715e">// s1은 더 이상 사용할 수 없음
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="해시맵-hashmap">해시맵 (HashMap)&lt;/h2>
&lt;p>키-값 쌍을 저장하는 컬렉션입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::collections::HashMap;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> scores &lt;span style="color:#f92672">=&lt;/span> HashMap::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scores.insert(String::from(&lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>), &lt;span style="color:#ae81ff">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scores.insert(String::from(&lt;span style="color:#e6db74">&amp;#34;Yellow&amp;#34;&lt;/span>), &lt;span style="color:#ae81ff">50&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> team_name &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> score &lt;span style="color:#f92672">=&lt;/span> scores.get(&lt;span style="color:#f92672">&amp;amp;&lt;/span>team_name);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust 라이프타임</title><link>https://seungyeah.github.io/posts/rust-post-10/</link><pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-10/</guid><description>&lt;h2 id="라이프타임이란">라이프타임이란?&lt;/h2>
&lt;p>라이프타임은 참조가 유효한 스코프를 나타냅니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> r;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x; &lt;span style="color:#75715e">// 에러! x의 라이프타임이 더 짧음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;r: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, r);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="함수에서의-라이프타임">함수에서의 라이프타임&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">longest&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(x: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span> &lt;span style="color:#66d9ef">str&lt;/span>, y: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span> &lt;span style="color:#66d9ef">str&lt;/span>) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span> &lt;span style="color:#66d9ef">str&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x.len() &lt;span style="color:#f92672">&amp;gt;&lt;/span> y.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="구조체에서의-라이프타임">구조체에서의 라이프타임&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ImportantExcerpt&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> part: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span> &lt;span style="color:#66d9ef">str&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> ImportantExcerpt&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">level&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="라이프타임-생략-규칙">라이프타임 생략 규칙&lt;/h2>
&lt;p>컴파일러가 자동으로 라이프타임을 추론하는 규칙들이 있습니다.&lt;/p></description></item><item><title>Rust 제네릭과 트레이트</title><link>https://seungyeah.github.io/posts/rust-post-9/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-9/</guid><description>&lt;h2 id="제네릭-타입">제네릭 타입&lt;/h2>
&lt;p>제네릭을 사용하면 코드 중복을 줄이고 재사용성을 높일 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">largest&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T: PartialOrd&lt;span style="color:#f92672">&amp;gt;&lt;/span>(list: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>[T]) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">T&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> largest &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>list[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#66d9ef">in&lt;/span> list.iter() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> item &lt;span style="color:#f92672">&amp;gt;&lt;/span> largest {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> largest &lt;span style="color:#f92672">=&lt;/span> item;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> largest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="구조체에서의-제네릭">구조체에서의 제네릭&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x: &lt;span style="color:#a6e22e">T&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y: &lt;span style="color:#a6e22e">T&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> Point&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">T&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>self.x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="트레이트-정의">트레이트 정의&lt;/h2>
&lt;p>트레이트는 특정 타입이 가지고 있는 기능들을 정의합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">trait&lt;/span> Summary {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">summarize&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; String;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Summary &lt;span style="color:#66d9ef">for&lt;/span> NewsArticle {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">summarize&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">format!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">, by &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74"> (&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span>, self.headline, self.author, self.location)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust 에러 처리</title><link>https://seungyeah.github.io/posts/rust-post-8/</link><pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-8/</guid><description>&lt;h2 id="panic과-복구-불가능한-에러">panic!과 복구 불가능한 에러&lt;/h2>
&lt;p>프로그램이 복구할 수 없는 상태에 도달했을 때 &lt;code>panic!&lt;/code> 매크로를 사용합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">panic!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;crash and burn&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="result를-이용한-복구-가능한-에러">Result를 이용한 복구 가능한 에러&lt;/h2>
&lt;p>대부분의 에러는 복구 가능하며, &lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code> 열거형을 사용합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::fs::File;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> f &lt;span style="color:#f92672">=&lt;/span> File::open(&lt;span style="color:#e6db74">&amp;#34;hello.txt&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> f {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(file) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> file,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(error) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">panic!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;파일을 열 수 없습니다: &lt;/span>&lt;span style="color:#e6db74">{:?}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, error)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-연산자">? 연산자&lt;/h2>
&lt;p>&lt;code>?&lt;/code> 연산자를 사용하면 에러 처리를 간단하게 할 수 있습니다.&lt;/p></description></item><item><title>Rust 열거형과 패턴 매칭</title><link>https://seungyeah.github.io/posts/rust-post-7/</link><pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-7/</guid><description>&lt;h2 id="열거형-정의">열거형 정의&lt;/h2>
&lt;p>열거형은 하나의 타입이 여러 가지 값 중 하나를 가질 수 있을 때 사용합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">IpAddrKind&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V4,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V6,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="데이터를-가지는-열거형">데이터를 가지는 열거형&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">IpAddr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V4(&lt;span style="color:#66d9ef">u8&lt;/span>, &lt;span style="color:#66d9ef">u8&lt;/span>, &lt;span style="color:#66d9ef">u8&lt;/span>, &lt;span style="color:#66d9ef">u8&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V6(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> home &lt;span style="color:#f92672">=&lt;/span> IpAddr::V4(&lt;span style="color:#ae81ff">127&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> loopback &lt;span style="color:#f92672">=&lt;/span> IpAddr::V6(String::from(&lt;span style="color:#e6db74">&amp;#34;::1&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="option-열거형">Option 열거형&lt;/h2>
&lt;p>Rust에는 null이 없는 대신 &lt;code>Option&amp;lt;T&amp;gt;&lt;/code> 열거형을 제공합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Some(T),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> None,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="match를-이용한-패턴-매칭">match를 이용한 패턴 매칭&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">value_in_cents&lt;/span>(coin: &lt;span style="color:#a6e22e">Coin&lt;/span>) -&amp;gt; &lt;span style="color:#66d9ef">u8&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> coin {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Coin::Penny &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Coin::Nickel &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Coin::Dime &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Coin::Quarter &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust 구조체와 메소드</title><link>https://seungyeah.github.io/posts/rust-post-6/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-6/</guid><description>&lt;h2 id="구조체-정의">구조체 정의&lt;/h2>
&lt;p>구조체는 관련있는 데이터를 하나로 묶는 커스텀 데이터 타입입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: String,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email: String,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sign_in_count: &lt;span style="color:#66d9ef">u64&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> active: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="구조체-인스턴스-생성">구조체 인스턴스 생성&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> user1 &lt;span style="color:#f92672">=&lt;/span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email: String::from(&lt;span style="color:#e6db74">&amp;#34;someone@example.com&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: String::from(&lt;span style="color:#e6db74">&amp;#34;someusername123&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> active: &lt;span style="color:#a6e22e">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sign_in_count: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="메소드-정의">메소드 정의&lt;/h2>
&lt;p>&lt;code>impl&lt;/code> 블록을 사용하여 구조체에 메소드를 정의할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">is_active&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">deactivate&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.active &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust 참조와 차용</title><link>https://seungyeah.github.io/posts/rust-post-5/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-5/</guid><description>&lt;h2 id="참조란">참조란?&lt;/h2>
&lt;p>참조(Reference)는 값을 소유하지 않고 해당 값을 가리키는 방법입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s1 &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> len &lt;span style="color:#f92672">=&lt;/span> calculate_length(&lt;span style="color:#f92672">&amp;amp;&lt;/span>s1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;The length of &amp;#39;&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; is &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>, s1, len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">calculate_length&lt;/span>(s: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>String) -&amp;gt; &lt;span style="color:#66d9ef">usize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s.len()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="가변-참조">가변 참조&lt;/h2>
&lt;p>값을 변경하려면 가변 참조를 사용해야 합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> change(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">change&lt;/span>(some_string: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> some_string.push_str(&lt;span style="color:#e6db74">&amp;#34;, world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="참조-규칙">참조 규칙&lt;/h2>
&lt;ol>
&lt;li>어느 시점에서든 하나의 가변 참조 또는 여러 개의 불변 참조를 가질 수 있습니다.&lt;/li>
&lt;li>참조는 항상 유효해야 합니다.&lt;/li>
&lt;/ol></description></item><item><title>Rust 소유권 시스템 이해하기</title><link>https://seungyeah.github.io/posts/rust-post-4/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-4/</guid><description>&lt;h2 id="소유권이란">소유권이란?&lt;/h2>
&lt;p>소유권(Ownership)은 Rust의 핵심 특징으로, 메모리 안전성을 보장하면서도 가비지 컬렉터 없이 메모리를 관리할 수 있게 해줍니다.&lt;/p>
&lt;h2 id="소유권-규칙">소유권 규칙&lt;/h2>
&lt;ol>
&lt;li>Rust의 각 값은 소유자(owner)를 가집니다.&lt;/li>
&lt;li>한 번에 딱 하나의 소유자만 존재할 수 있습니다.&lt;/li>
&lt;li>소유자가 스코프를 벗어나면, 값이 버려집니다.&lt;/li>
&lt;/ol>
&lt;h2 id="move-의미론">Move 의미론&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> s1 &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> s2 &lt;span style="color:#f92672">=&lt;/span> s1; &lt;span style="color:#75715e">// s1이 s2로 move됨
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// println!(&amp;#34;{}&amp;#34;, s1); // 에러! s1은 더 이상 유효하지 않음
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="clone을-이용한-복사">Clone을 이용한 복사&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> s1 &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> s2 &lt;span style="color:#f92672">=&lt;/span> s1.clone(); &lt;span style="color:#75715e">// 깊은 복사
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, s1, s2); &lt;span style="color:#75715e">// 정상 작동
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust 기본 문법 - 변수와 타입</title><link>https://seungyeah.github.io/posts/rust-post-3/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/rust-post-3/</guid><description>&lt;h2 id="변수와-불변성">변수와 불변성&lt;/h2>
&lt;p>Rust에서 변수는 기본적으로 불변(immutable)입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// x = 6; // 에러! 불변 변수는 재할당할 수 없습니다.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="가변-변수">가변 변수&lt;/h2>
&lt;p>변수를 가변으로 만들려면 &lt;code>mut&lt;/code> 키워드를 사용합니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>; &lt;span style="color:#75715e">// 정상 작동
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="기본-타입들">기본 타입들&lt;/h2>
&lt;p>Rust의 기본 스칼라 타입들을 살펴보겠습니다.&lt;/p>
&lt;h3 id="정수-타입">정수 타입&lt;/h3>
&lt;ul>
&lt;li>&lt;code>i8&lt;/code>, &lt;code>i16&lt;/code>, &lt;code>i32&lt;/code>, &lt;code>i64&lt;/code>, &lt;code>i128&lt;/code> (부호 있는 정수)&lt;/li>
&lt;li>&lt;code>u8&lt;/code>, &lt;code>u16&lt;/code>, &lt;code>u32&lt;/code>, &lt;code>u64&lt;/code>, &lt;code>u128&lt;/code> (부호 없는 정수)&lt;/li>
&lt;/ul>
&lt;h3 id="부동소수점-타입">부동소수점 타입&lt;/h3>
&lt;ul>
&lt;li>&lt;code>f32&lt;/code>, &lt;code>f64&lt;/code> (32비트, 64비트 부동소수점)&lt;/li>
&lt;/ul>
&lt;h3 id="불린-타입">불린 타입&lt;/h3>
&lt;ul>
&lt;li>&lt;code>bool&lt;/code> (true 또는 false)&lt;/li>
&lt;/ul>
&lt;h3 id="문자-타입">문자 타입&lt;/h3>
&lt;ul>
&lt;li>&lt;code>char&lt;/code> (4바이트 유니코드 스칼라 값)&lt;/li>
&lt;/ul></description></item><item><title>Rust 소개 및 환경 설정</title><link>https://seungyeah.github.io/posts/third-post/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/third-post/</guid><description>&lt;h2 id="소개">소개&lt;/h2>
&lt;p>안녕하세요! Rust 완벽 가이드 시리즈의 첫 번째 글입니다. 이 글에서는 Rust 언어에 대한 기본적인 소개와 개발 환경 설정 방법에 대해 알아보겠습니다.&lt;/p>
&lt;h2 id="rust란">Rust란?&lt;/h2>
&lt;p>Rust는 Mozilla에서 개발한 시스템 프로그래밍 언어입니다. 2010년에 처음 공개되었으며, 2015년에 1.0 버전이 릴리스되었습니다.&lt;/p>
&lt;h3 id="rust의-특징">Rust의 특징&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>메모리 안전성&lt;/strong>: 컴파일 타임에 메모리 관련 버그를 방지&lt;/li>
&lt;li>&lt;strong>동시성 안전성&lt;/strong>: 데이터 레이스 없이 안전한 동시성 프로그래밍&lt;/li>
&lt;li>&lt;strong>제로 코스트 추상화&lt;/strong>: 고수준 추상화가 런타임 오버헤드 없음&lt;/li>
&lt;li>&lt;strong>C/C++ 수준의 성능&lt;/strong>: 시스템 프로그래밍에 적합한 성능&lt;/li>
&lt;/ul>
&lt;h2 id="왜-rust를-배워야-할까">왜 Rust를 배워야 할까?&lt;/h2>
&lt;h3 id="1-메모리-안전성">1. 메모리 안전성&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> first &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>v[&lt;span style="color:#ae81ff">0&lt;/span>]; &lt;span style="color:#75715e">// 불변 참조
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> v.push(&lt;span style="color:#ae81ff">4&lt;/span>); &lt;span style="color:#75715e">// 컴파일 에러! 가변 참조와 불변 참조 동시 사용 불가
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;First: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, first);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 코드는 컴파일되지 않습니다. Rust의 소유권 시스템이 런타임 에러를 컴파일 타임에 방지합니다.&lt;/p></description></item><item><title>Rust 소개 및 환경 설정2</title><link>https://seungyeah.github.io/posts/third-post2/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/posts/third-post2/</guid><description>&lt;h2 id="소개">소개&lt;/h2>
&lt;p>안녕하세요! Rust 완벽 가이드 시리즈의 첫 번째 글입니다. 이 글에서는 Rust 언어에 대한 기본적인 소개와 개발 환경 설정 방법에 대해 알아보겠습니다.&lt;/p>
&lt;h2 id="rust란">Rust란?&lt;/h2>
&lt;p>Rust는 Mozilla에서 개발한 시스템 프로그래밍 언어입니다. 2010년에 처음 공개되었으며, 2015년에 1.0 버전이 릴리스되었습니다.&lt;/p>
&lt;h3 id="rust의-특징">Rust의 특징&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>메모리 안전성&lt;/strong>: 컴파일 타임에 메모리 관련 버그를 방지&lt;/li>
&lt;li>&lt;strong>동시성 안전성&lt;/strong>: 데이터 레이스 없이 안전한 동시성 프로그래밍&lt;/li>
&lt;li>&lt;strong>제로 코스트 추상화&lt;/strong>: 고수준 추상화가 런타임 오버헤드 없음&lt;/li>
&lt;li>&lt;strong>C/C++ 수준의 성능&lt;/strong>: 시스템 프로그래밍에 적합한 성능&lt;/li>
&lt;/ul>
&lt;h2 id="왜-rust를-배워야-할까">왜 Rust를 배워야 할까?&lt;/h2>
&lt;h3 id="1-메모리-안전성">1. 메모리 안전성&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> first &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>v[&lt;span style="color:#ae81ff">0&lt;/span>]; &lt;span style="color:#75715e">// 불변 참조
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> v.push(&lt;span style="color:#ae81ff">4&lt;/span>); &lt;span style="color:#75715e">// 컴파일 에러! 가변 참조와 불변 참조 동시 사용 불가
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;First: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, first);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 코드는 컴파일되지 않습니다. Rust의 소유권 시스템이 런타임 에러를 컴파일 타임에 방지합니다.&lt;/p></description></item><item><title>Rust 프로그래밍</title><link>https://seungyeah.github.io/series/rust-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seungyeah.github.io/series/rust-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</guid><description>&lt;p>Rust 언어의 기초부터 고급 주제까지 다루는 시리즈입니다.&lt;/p></description></item></channel></rss>